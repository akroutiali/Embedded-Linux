step 1 Build Toolchain 

Since we are going to run in laptop with an Intel processor, and we want to build object code for the ARM processor at the heart of the Raspberry Pi,  
we need a cross-compiler and its associated tools, which is usually called a “toolchain“. Here we are using “crosstool-ng” to build such tool chain.


Step 1.1 Download crosstool-ng

We go to: http://crosstool-ng.org/#download_and_usage

and download the most recent version, that at the time of writing this blog was:  1.17.0
note that in the download page, the version numbers are sorted alphabetically (not numerically).
In my first visit, I went straight to the bottom of the page and erroneously grabbed version 1.9.3,
just because it was at the bottom of the page…

This link below, with the downloads sorted by date, might be useful to you:
http://crosstool-ng.org/download/crosstool-ng/?sort=modtime&order=desc

We created a directory to host it and then downloaded and extracted the sources by doing:

mkdir -p  ~/src/RaspberryPi/toolchain
cd ~/src/RaspberryPi/toolchain
wget http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.24.0.tar.bz2
tar xjf crosstool-ng-1.24.0.tar.bz2
cd crosstool-ng-1.24.0

Step 1.2 Configure and Build


We chose to configure the tool to be installed in a local directory inside our home directory.

./bootstrap
./configure --enable-local
make -j`nproc`

to get this to work, we had to install the following Ubuntu packages (most of which were listed in Andrew’s recipe),

bison
cvs
flex
gperf
texinfo
automake
libtool
The whole is done with the command:

sudo install install bison cvs flex gperf texinfo automake libtool
then we can do

Configure the build tool
./ct-ng list-samples command shows the pre defined configurations for different setups (arch: armv7, armv8, aarch64 etc., library : uClibc, libc etc.) for different platforms.

Let’s generate toolchain (64bit) for ARMv8 architecture and libc library. ct-ng has pre defined configuration for RPI3 Model B.

./ct-ng aarch64-rpi3-linux-gnu
By default the standard library is glibc.

./ct-ng menuconfig
In Paths and misc options, change Maximum log level to see to DEBUG.
In Operating system, select Version of Linux as 4.19.105 as we are going to use this version of Linux in the subsequent tutorials.
In Debug facilites, disable all options for now as it takes forever to compile.
Build toolchain
./ct-ng build
Now the toolchain is installed in ~/x-tools directory. Add this $HOME/x-tools/aarch64-rpi3-linux-gnu/bin/ to PATH env varibale in .bashrc so that it can be detected for compiling the binaries.

echo 'export PATH=$PATH:$HOME/x-tools/aarch64-rpi3-linux-gnu/bin/' >> ~/.bashrc
source ~/.bashrc
Test the toolchain
Write a sample C program to cross compile with toolchain

file : dummy.c

int main(void)
{       
        return 0;
}       
Compile the program with cross toolchain
aarch64-rpi3-linux-gnu-gcc dummy.c -o dummy
You shouldn’t see any error or warnings.

Check the binary architecture
file dummy
You should see output similar to the following. The output must have words ARM aarch64 and ld-linux-aarch64.so.1.
